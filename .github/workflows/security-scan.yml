name: Security - nightly image scan

on:
  schedule:
    - cron: '0 2 * * *' # nightly at 02:00 UTC
  workflow_dispatch:
  pull_request:

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    env:
      # Ensure compose builds have explicit defaults in this workflow too
      NGINX_BASE_IMAGE: nginx:alpine
      PHP_BASE_IMAGE: php:8.2-fpm-alpine
      DB_HOST: mysql
      DB_NAME: my_app_db
      DB_USER: app_user
      DB_PASSWORD: app_pass
      MYSQL_ROOT_PASSWORD: rootpass
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Trivy
        run: |
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          sudo apt-get update && sudo apt-get install -y jq

      - name: Build images (local)
        run: |
          docker compose build --pull

      - name: Trivy scan (PRs - informational)
        if: github.event_name == 'pull_request'
        run: |
          set -e
          for img in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep -E 'lemp-stack|nginx:|php:' | sort -u); do
            echo "Scanning $img (informational)"
            safe=$(echo "$img" | sed 's#[:/]#_#g')
            trivy image --severity HIGH,CRITICAL --format sarif --output trivy-$safe.sarif --timeout 5m "$img" || true
            trivy image --severity HIGH,CRITICAL --format json  --output trivy-$safe.json  --timeout 5m "$img" || true
          done

      - name: Create Trivy summary (PRs)
        if: github.event_name == 'pull_request'
        run: |
          echo "# Trivy Summary" > trivy-summary.md
          echo "# Proposed .trivyignore entries (review before use)" > trivy-proposed-ignore.txt
          echo "# Add a rationale above each CVE and link to a tracking issue." >> trivy-proposed-ignore.txt
          for f in trivy-*.json; do
            [ -f "$f" ] || continue
            img=$(echo "$f" | sed 's/^trivy-//' | sed 's/\.json$//')
            crit=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' "$f")
            high=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' "$f")
            echo "\n## $img" >> trivy-summary.md
            echo "- CRITICAL: $crit" >> trivy-summary.md
            echo "- HIGH: $high" >> trivy-summary.md
            jq -r '.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL") | .VulnerabilityID' "$f" | sort -u | sed 's/^/# CVE review required\n/' | sed 's/^# CVE review required$//' >> trivy-proposed-ignore.txt
          done

      - name: Comment Trivy summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('trivy-summary.md','utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Upload proposed ignore file (PRs)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-proposed-ignore
          path: trivy-proposed-ignore.txt

      - name: Trivy scan (main/schedule - blocking on HIGH/CRITICAL)
        if: github.event_name != 'pull_request'
        run: |
          set -e
          for img in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep -E 'lemp-stack|nginx:|php:' | sort -u); do
            echo "Scanning $img (blocking)"
            trivy image --severity HIGH,CRITICAL --exit-code 1 --format sarif --output trivy-$${img//[:\/]/_}.sarif --timeout 5m "$img"
          done

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: .
          category: trivy
