name: CI - secrets + smoke tests

on:
  push:
  pull_request:

jobs:
  secret-scan:
    name: Secret scan (gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run gitleaks (detect high-confidence secrets)
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --verbose --redact --exit-code 1
        env:
          GITLEAKS_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: Build, start and smoke-test stack
    runs-on: ubuntu-latest
    needs: secret-scan
    env:
      COMPOSE_HTTP_TIMEOUT: 200
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Show Docker and Compose versions
        run: |
          docker --version
          docker compose version

      - name: Validate docker-compose.yml
        run: docker compose config

      - name: PHP lint (syntax check all PHP files)
        run: |
          docker run --rm -v "$PWD/www":/app -w /app php:8.2-cli sh -lc '
            set -e
            if ls *.php >/dev/null 2>&1; then
              php -v
              for f in $(find . -name "*.php"); do php -l "$f"; done
            else
              echo "No PHP files to lint"
            fi
          '

      - name: Build and start stack
        run: |
          docker compose up --build -d
        timeout-minutes: 10

      - name: Wait for /test-db.php (max 90s)
        run: |
          set -e
          attempts=0
          max=45
          until curl -sSf http://localhost:8080/test-db.php > /dev/null 2>&1 || [ $attempts -ge $max ]; do
            attempts=$((attempts+1))
            echo "Waiting for test-db.php ($attempts/$max)..."
            sleep 2
          done
          if [ $attempts -ge $max ]; then
            echo "Timeout waiting for test-db.php"
            docker compose logs --tail=200
            exit 1
          fi

      - name: Run smoke checks
        run: |
          set -e
          echo "Checking /"
          curl -sSf http://localhost:8080/ | head -n 2
          echo "Checking /test-db.php"
          curl -sSf http://localhost:8080/test-db.php
          echo "Checking /info.php (should be 403 unless APP_ENV=development)"
          status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/info.php)
          echo "info.php returned $status"

      - name: Tear down stack
        if: always()
        run: docker compose down --volumes --remove-orphans

  supply-chain:
    name: SBOM + Image Scan (non-blocking)
    runs-on: ubuntu-latest
    needs: smoke-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Syft and Grype/Trivy
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM for repository
        run: |
          syft dir:. -o spdx-json > sbom.spdx.json || true

      - name: Build images locally for scan
        run: |
          docker compose build --pull

      - name: Scan local images with Trivy (non-blocking)
        run: |
          set -e
          for img in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep -E 'lemp-stack|nginx:|php:' | sort -u); do
            echo "Scanning $img"
            trivy image --severity HIGH,CRITICAL --no-progress --timeout 5m --format table "$img" || true
          done

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
